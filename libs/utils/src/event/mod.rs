// Code generated by jtd-codegen for Rust v0.2.1

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
#[serde(tag = "eventType")]
pub enum Event {
    #[serde(rename = "USER_CREATED")]
    UserCreated(EventUserCreated),

    #[serde(rename = "USER_DELETED")]
    UserDeleted(EventUserDeleted),

    #[serde(rename = "USER_PAYMENT_PLAN_CHANGED")]
    UserPaymentPlanChanged(EventUserPaymentPlanChanged),
}

#[derive(Serialize, Deserialize)]
pub struct EventUserCreated {
    #[serde(rename = "id")]
    pub id: String,
}

#[derive(Serialize, Deserialize)]
#[serde(tag = "anythingType")]
pub enum EventUserDeletedAnything {
    #[serde(rename = "A_THING")]
    AThing(EventUserDeletedAnythingAThing),

    #[serde(rename = "B_THING")]
    BThing(EventUserDeletedAnythingBThing),
}

#[derive(Serialize, Deserialize)]
pub struct EventUserDeletedAnythingAThing {
    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "name")]
    pub name: String,
}

#[derive(Serialize, Deserialize)]
pub struct EventUserDeletedAnythingBThing {
    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "name")]
    pub name: String,
}

#[derive(Serialize, Deserialize)]
pub struct EventUserDeleted {
    #[serde(rename = "anything")]
    pub anything: EventUserDeletedAnything,

    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "softDelete")]
    pub softDelete: bool,
}

#[derive(Serialize, Deserialize)]
pub enum EventUserPaymentPlanChangedPlan {
    #[serde(rename = "FREE")]
    Free,

    #[serde(rename = "PAID")]
    Paid,
}

#[derive(Serialize, Deserialize)]
pub struct EventUserPaymentPlanChanged {
    #[serde(rename = "id")]
    pub id: String,

    #[serde(rename = "plan")]
    pub plan: EventUserPaymentPlanChangedPlan,
}
